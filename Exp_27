#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
sem_t semaphore;
void* process(void* process_id) {
    int id = *((int*)process_id);
    printf("Process P%d: Waiting for semaphore...\n", id);
    sem_wait(&semaphore);
    printf("Process P%d: Entered critical section.\n", id);
    // Simulate some work
    sleep(2);
    printf("Process P%d: Exiting critical section.\n", id);
    sem_post(&semaphore);
    printf("Process P%d: Signaled another process.\n", id);
    pthread_exit(NULL);
}
int main() {
    int num_instances = 4;
    int num_processes = 4;
    int process_ids[] = {1, 2, 3, 4};
    sem_init(&semaphore, 0, num_instances);
    pthread_t threads[num_processes];
    // Create threads for each process
    for (int i = 0; i < num_processes; i++) {
        pthread_create(&threads[i], NULL, process, (void*)&process_ids[i]);
    }
    // Wait for all threads to complete
    for (int i = 0; i < num_processes; i++) {
        pthread_join(threads[i], NULL);
    }
    sem_destroy(&semaphore);
    return 0;
}
