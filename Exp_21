#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>

#define NUM_PHILOSOPHERS 5

enum { THINKING, HUNGRY, EATING } state[NUM_PHILOSOPHERS];
pthread_mutex_t mutex;
sem_t semaphores[NUM_PHILOSOPHERS];

void test(int i) {
    if (state[i] == HUNGRY
        && state[(i + NUM_PHILOSOPHERS - 1) % NUM_PHILOSOPHERS] != EATING
        && state[(i + 1) % NUM_PHILOSOPHERS] != EATING) {
        state[i] = EATING;
        sem_post(&semaphores[i]);
    }
}

void pickup_forks(int i) {
    pthread_mutex_lock(&mutex);
    state[i] = HUNGRY;
    test(i);
    pthread_mutex_unlock(&mutex);
    sem_wait(&semaphores[i]);
}

void return_forks(int i) {
    pthread_mutex_lock(&mutex);
    state[i] = THINKING;
    test((i + NUM_PHILOSOPHERS - 1) % NUM_PHILOSOPHERS);
    test((i + 1) % NUM_PHILOSOPHERS);
    pthread_mutex_unlock(&mutex);
}

void *philosopher(void *arg) {
    int id = *(int *)arg;

    while (1) {
        printf("Philosopher %d is thinking\n", id);
        sleep(rand() % 3);

        printf("Philosopher %d is hungry\n", id);
        pickup_forks(id);

        printf("Philosopher %d is eating\n", id);
        sleep(rand() % 3);

        printf("Philosopher %d is returning forks\n", id);
        return_forks(id);
    }

    return NULL;
}

int main() {
    pthread_t threads[NUM_PHILOSOPHERS];
    int ids[NUM_PHILOSOPHERS];
    int i;

    pthread_mutex_init(&mutex, NULL);
    for (i = 0; i < NUM_PHILOSOPHERS; i++) {
        state[i] = THINKING;
        sem_init(&semaphores[i], 0, 0);
        ids[i] = i;
    }

    for (i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_create(&threads[i], NULL, philosopher, &ids[i]);
    }

    for (i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(threads[i], NULL);
    }

    for (i = 0; i < NUM_PHILOSOPHERS; i++) {
        sem_destroy(&semaphores[i]);
    }
    pthread_mutex_destroy(&mutex);

    return 0;
}
