#include <stdio.h>

struct Process {
    int pid;
    int burstTime;
};

void swap(struct Process *a, struct Process *b) {
    struct Process temp = *a;
    *a = *b;
    *b = temp;
}

void sortProcesses(struct Process processes[], int numProcesses) {
    for (int i = 0; i < numProcesses - 1; i++) {
        for (int j = 0; j < numProcesses - i - 1; j++) {
            if (processes[j].burstTime > processes[j + 1].burstTime) {
                swap(&processes[j], &processes[j + 1]);
            }
        }
    }
}

void calculateWaitingTime(struct Process processes[], int numProcesses, int waitingTime[]) {
    waitingTime[0] = 0;

    for (int i = 1; i < numProcesses; i++) {
        waitingTime[i] = processes[i - 1].burstTime + waitingTime[i - 1];
    }
}

void calculateTurnaroundTime(struct Process processes[], int numProcesses, int waitingTime[], int turnaroundTime[]) {
    for (int i = 0; i < numProcesses; i++) {
        turnaroundTime[i] = processes[i].burstTime + waitingTime[i];
    }
}

void calculateAverageTimes(struct Process processes[], int numProcesses) {
    int waitingTime[numProcesses];
    int turnaroundTime[numProcesses];

    sortProcesses(processes, numProcesses);
    calculateWaitingTime(processes, numProcesses, waitingTime);
    calculateTurnaroundTime(processes, numProcesses, waitingTime, turnaroundTime);

    int totalWaitingTime = 0;
    int totalTurnaroundTime = 0;

    printf("Process\tBurst Time\tWaiting Time\tTurnaround Time\n");

    for (int i = 0; i < numProcesses; i++) {
        totalWaitingTime += waitingTime[i];
        totalTurnaroundTime += turnaroundTime[i];

        printf("%d\t%d\t\t%d\t\t%d\n", processes[i].pid, processes[i].burstTime, waitingTime[i], turnaroundTime[i]);
    }

    double avgWaitingTime = (double)totalWaitingTime / numProcesses;
    double avgTurnaroundTime = (double)totalTurnaroundTime / numProcesses;

    printf("\nAverage Waiting Time: %.2lf\n", avgWaitingTime);
    printf("Average Turnaround Time: %.2lf\n", avgTurnaroundTime);
}

int main() {
    struct Process processes[] = {
        {0, 2},
        {1, 4},
        {2, 8}
    };

    int numProcesses = sizeof(processes) / sizeof(processes[0]);

    calculateAverageTimes(processes, numProcesses);

    return 0;
}
