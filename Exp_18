#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#define BUFFER_SIZE 5  // Size of the buffer

int buffer[BUFFER_SIZE];  // Shared buffer
int count = 0;  // Number of items in the buffer

pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;  // Mutex for buffer access
pthread_cond_t producer_cond = PTHREAD_COND_INITIALIZER;  // Condition variable for producer
pthread_cond_t consumer_cond = PTHREAD_COND_INITIALIZER;  // Condition variable for consumer

void *producer(void *arg) {
    int item = 1;
    
    while (1) {
        pthread_mutex_lock(&mutex);  // Acquire the mutex lock
        
        // Check if the buffer is full
        if (count == BUFFER_SIZE) {
            pthread_cond_wait(&producer_cond, &mutex);  // Wait until the buffer is not full
        }
        
        // Produce an item
        buffer[count] = item;
        count++;
        printf("Produced item %d\n", item);
        item++;
        
        pthread_cond_signal(&consumer_cond);  // Signal the consumer that an item is available
        
        pthread_mutex_unlock(&mutex);  // Release the mutex lock
    }
    
    return NULL;
}

void *consumer(void *arg) {
    while (1) {
        pthread_mutex_lock(&mutex);  // Acquire the mutex lock
        
        // Check if the buffer is empty
        if (count == 0) {
            pthread_cond_wait(&consumer_cond, &mutex);  // Wait until the buffer is not empty
        }
        
        // Consume an item
        int item = buffer[count - 1];
        count--;
        printf("Consumed item %d\n", item);
        
        pthread_cond_signal(&producer_cond);  // Signal the producer that a slot is available
        
        pthread_mutex_unlock(&mutex);  // Release the mutex lock
    }
    
    return NULL;
}

int main() {
    pthread_t producer_thread, consumer_thread;
    
    // Create the producer thread
    if (pthread_create(&producer_thread, NULL, producer, NULL) != 0) {
        fprintf(stderr, "Error creating producer thread\n");
        return 1;
    }
    
    // Create the consumer thread
    if (pthread_create(&consumer_thread, NULL, consumer, NULL) != 0) {
        fprintf(stderr, "Error creating consumer thread\n");
        return 1;
    }
    
    // Wait for the threads to finish
    if (pthread_join(producer_thread, NULL) != 0) {
        fprintf(stderr, "Error joining producer thread\n");
        return 1;
    }
    if (pthread_join(consumer_thread, NULL) != 0) {
        fprintf(stderr, "Error joining consumer thread\n");
        return 1;
    }
    
    return 0;
}
