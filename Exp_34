#include <stdio.h>

#define MAX_PARTITIONS 100
#define MAX_PROCESSES 100

void worstFit(int partitions[], int numPartitions, int processes[], int numProcesses) {
    int allocated[MAX_PROCESSES] = {0}; // Array to track allocation status of each process

    for (int i = 0; i < numProcesses; i++) {
        int currentProcess = processes[i];
        int worstIndex = -1; // Index of the partition with the worst fit
        int worstFit = -1; // Size of the worst fit partition

        for (int j = 0; j < numPartitions; j++) {
            if (partitions[j] >= currentProcess && partitions[j] > worstFit) {
                worstIndex = j;
                worstFit = partitions[j];
            }
        }

        if (worstIndex != -1) {
            allocated[i] = 1; // Mark the process as allocated
            partitions[worstIndex] -= currentProcess;
        }
    }

    // Print the allocation details
    printf("Process\t\tSize\t\tPartition\n");
    for (int i = 0; i < numProcesses; i++) {
        printf("P%d\t\t%d KB\t\t", i + 1, processes[i]);
        if (allocated[i])
            printf("Partition %d\n", i + 1);
        else
            printf("Not Allocated\n");
    }
}

int main() {
    int numPartitions = 4;
    int partitions[] = {40, 10, 30, 60};

    int numProcesses = 5;
    int processes[] = {100, 50, 30, 120, 35};

    worstFit(partitions, numPartitions, processes, numProcesses);

    return 0;
}
